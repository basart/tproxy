#include <stdio.h>
#include <errno.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <pthread.h>
#include <string.h>

#define BLACKLIST "www.kinogo.co, www.tushkan.tv"
#define BUFSIZE 10240
#define ERROR404 "HTTP/1.1 404 Not Found\nContent-Length: 219\nContent-Type: text/html\n\n<html><head><title>404 Not Found</title></head><body><h1>404 Not Found</h1></body></html>\0"
#define ERROR400 "HTTP/1.1 400 Bad Request\nContent-Length: 230\nContent-Type: text/html\n\n<html><head><title>400 Bad Request</title></head><body><h1>400 Bad Request</h1></body></html>\0"
#define ERROR403 "HTTP/1.1 403 Permission Denied\nContent-Length: 212\nContent-Type: text/html\n\n<html><head><title>403 Permission Denied</title></head><body><h1>403 Permission Denied</h1></body></html>\0"

void broken_pipe_handler(int signum) {}
void fail(const char* str){
	perror(str); 
	exit(1);
}

void fail_thread(const char* str){
	perror(str); 
	pthread_exit(0);
}

char* parse_host(char* buf, char** saveptr) {
	char* tok;
	tok = strtok_r(buf, " \r\n", saveptr);
	while (tok != NULL){
    		if (strcmp(tok, "Host:")==0){
    			tok = strtok_r(NULL, " \r\n", saveptr);
    			return tok;
    		}
		
    		tok = strtok_r(NULL, " \r\n", saveptr);
	}
	return NULL;
}

void close_connections(struct addrinfo* host, int sock) {
	if (host!=NULL)
		freeaddrinfo(host);
	close(sock);
	pthread_exit(0);
}

void* server_client(void* v) {
	int sock_client = *(int*) v;
	free(v);
	char buf[BUFSIZE];
	char req[BUFSIZE];
	int result ;
	char* svptr;
	char  req_cpy[BUFSIZE];	
	int err;	
	result = recv (sock_client , buf , BUFSIZE , 0);
	if (result<=0) 
		close_connections(NULL, sock_client);
	strcat(req, buf);	
	
	strcpy(req_cpy, req);
	char* host_name = parse_host(req_cpy, &svptr);
	
	struct addrinfo* host;

	if (host_name==NULL){
		if (write(sock_client, ERROR400, strlen(ERROR400))<0) 
			fail_thread("write");
		close_connections(NULL, sock_client);
	}

	if (strstr(BLACKLIST, host_name)!=NULL){
		if (write(sock_client, ERROR403, strlen(ERROR403))<0) 
			fail_thread("write");
		close_connections(NULL, sock_client);
	}

	err = getaddrinfo(host_name, "80", NULL, &host);
	if (err) {
		if (write(sock_client, ERROR404, strlen(ERROR404))<0) 
			fail_thread("write");
		close_connections(host, sock_client);
	}
	 
	int sock_server = socket(host->ai_family, SOCK_STREAM, 0);
	if (sock_server < 0) 
		fail_thread("socket");	  

	if (connect(sock_server, host->ai_addr, host->ai_addrlen)) {
		if (write(sock_client, ERROR404, strlen(ERROR404))<0) 
			fail_thread("write");
		close_connections(host, sock_client);
	} 
	else{  

		printf("------------------------\n%s------------------------\n", req);
		if( send (sock_server , req , result , 0) < 0)
		{
			fail_thread("send");			
			close_connections(host, sock_client);
		}   
		int read_from_sock_server = read(sock_server, buf, BUFSIZE);
		while (read_from_sock_server>0) {
			if (write(sock_client, buf, read_from_sock_server)<0) 
				fail_thread("write");
			read_from_sock_server = read(sock_server, buf, BUFSIZE);
		}
		if (read_from_sock_server<0) 
			fail_thread("read");
	}
	close(sock_server);
	close_connections(host, sock_client);
}

int main(int argc, char* argv[]) {
	if (argc != 2){
		fprintf(stderr, "usage: %s port\n", argv[0]);
		exit(1);
	}

	struct addrinfo* host;
	struct addrinfo  hints;
	memset(&hints, 0, sizeof(hints));
	hints.ai_flags = AI_PASSIVE;
	int err = getaddrinfo(NULL, argv[1], &hints, &host);
	if (err){
		fprintf(stderr, "%s : %s\n", argv[1], gai_strerror(err));		
		exit(err);
	}
	int serv_sock = socket(host->ai_family, SOCK_STREAM, host->ai_protocol);
	if (serv_sock < 0) 
		fail("socket");	
	int opt = 1;
	if (setsockopt (serv_sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof (int)) == -1) 
		fail("setsockopt");
	if (bind(serv_sock, host->ai_addr, host->ai_addrlen)) 
		fail("bind");
	if (listen(serv_sock, 1024)) 
		fail("listen");
	freeaddrinfo(host);
	printf("Waiting for connections on port %s\n", argv[1]);
	int* new_sock;
	pthread_t new_thread;
	while (true){
		new_sock  = (int*) malloc(sizeof(int));
		*new_sock = accept(serv_sock, NULL, NULL);
		if (*new_sock < 0) 
			fail("accept");
		printf("1");
		pthread_create(&new_thread, NULL, server_client, new_sock);
		pthread_detach(new_thread);
	}
}
